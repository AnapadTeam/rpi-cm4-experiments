import org.openjfx.gradle.*

import java.lang.reflect.Field

plugins {
    id 'java'
    id 'application'

    // For JavaFX
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'tech.anapad.rpicm4experiments'
version '1.0-SNAPSHOT'

sourceCompatibility = 14
targetCompatibility = 14

repositories {
    mavenCentral()
}

dependencies {
    // Logging framework
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'

    // Logging implementation
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
}

application {
    // Define the main class for the application.
    mainClass = 'tech.anapad.rpicm4experiments.FrameBufferJavaTest'
    mainModule = 'FrameBufferJavaTest'
}

applicationDefaultJvmArgs = ["-Dglass.platform=Monocle"]

distTar.enabled = false
distZip.enabled = false
build {
    dependsOn installDist // Creates shell scripts to run the already built jars
}

// START JavaFX configuration
Class<?> c = Class.forName("org.openjfx.gradle.JavaFXPlatform");
Object[] objects = c.getEnumConstants();
for(Object obj : objects) {
    try {
        Field keyField = obj.class.getDeclaredField("classifier");
        keyField.setAccessible(true); // if it is private for example.
        keyField.set(obj, "linux-aarch64-monocle");
        System.out.println("value : " + keyField.get(obj).toString());
    } catch (NoSuchFieldException e) {
        e.printStackTrace()
    }
}

javafx {
    version = "18.0.2"
    modules = ['javafx.base', 'javafx.graphics']

//    var platformField = JavaFXOptions.class.getDeclaredField("platform")
//    platformField.setAccessible(true)
//    platformField.set(org.openjfx.gradle.JavaFXOptions, "linux-aarch64-monocle")


}

// END JavaFX configuration
